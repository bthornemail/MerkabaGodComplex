apiVersion: apps/v1
kind: Deployment
metadata:
  name: cue-api
  namespace: cue-system
  labels:
    app: cue-api
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: cue-api
  template:
    metadata:
      labels:
        app: cue-api
        version: v1.0.0
    spec:
      containers:
      - name: cue-api
        image: cue-system:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: NODE_ENV
          value: "production"
        - name: CUE_API_HOST
          value: "0.0.0.0"
        - name: CUE_API_PORT
          value: "3000"
        - name: CUE_LOG_LEVEL
          value: "info"
        volumeMounts:
        - name: config-volume
          mountPath: /app/cue-config.json
          subPath: cue-config.json
        - name: data-volume
          mountPath: /app/data
        - name: logs-volume
          mountPath: /app/logs
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config-volume
        configMap:
          name: cue-config
      - name: data-volume
        persistentVolumeClaim:
          claimName: cue-data-pvc
      - name: logs-volume
        emptyDir: {}
      restartPolicy: Always
      serviceAccountName: cue-service-account
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cue-nginx
  namespace: cue-system
  labels:
    app: cue-nginx
    version: v1.0.0
spec:
  replicas: 2
  selector:
    matchLabels:
      app: cue-nginx
  template:
    metadata:
      labels:
        app: cue-nginx
        version: v1.0.0
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
          name: http
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
        securityContext:
          runAsNonRoot: true
          runAsUser: 101
          runAsGroup: 101
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: cue-system
  labels:
    app: redis
    version: v1.0.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        version: v1.0.0
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        command:
          - redis-server
          - --appendonly
          - "yes"
        volumeMounts:
        - name: redis-data
          mountPath: /data
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data-pvc