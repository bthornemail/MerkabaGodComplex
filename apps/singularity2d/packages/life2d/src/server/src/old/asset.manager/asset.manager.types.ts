import '../../src/vert.theory.io'

type ASSET_NFT = NFT_THEORY;
type ASSET_NFT_ADDRESS = string;

type ASSET_PROVIDER = WALLET_THEORY;
type ASSET_PROVIDER_PUBLIC_KEY = PUBLIC_KEY;
type ASSET_PROVIDER_PRIVATE_KEY = PRIVATE_KEY;

type ASSET_CONSUMER = WALLET_THEORY;
type ASSET_CONSUMER_PUBLIC_KEY = PUBLIC_KEY;
type ASSET_CONSUMER_PRIVATE_KEY = PRIVATE_KEY;

type ASSET_VIEWER = WALLET_THEORY;
type ASSET_VIEWER_PUBLIC_KEY = PUBLIC_KEY;
type ASSET_VIEWER_PRIVATE_KEY = PRIVATE_KEY;

type ASSET_POST = ASSET_NFT;
type ASSET_REQUEST = {};
type ASSET_REQUEST_PRIVATE_KEY = PRIVATE_KEY;
type ASSET_REQUEST_PUBLIC_KEY = PUBLIC_KEY;
type ASSET_REQUEST_SIGNATURE = SIGNATURE;

type ASSET_RESPONSE = {};
type ASSET_RESPONSE_PRIVATE_KEY = PRIVATE_KEY;
type ASSET_RESPONSE_PUBLIC_KEY = PUBLIC_KEY;
type ASSET_RESPONSE_SIGNATURE = SIGNATURE;

type ASSET_BOARD = ASSET_POST[];

export type ASSET_POST_JSON = {
    title: TITLE_STRING;
    summary: SUMMARY_STRING;
    description: DESCRIPTION_STRING;
    images?: BASE_64_MIME_IMAGE[];
    tags?: ID_TAG[];
    keywords?: KEYWORD_STRING[];
    value: number;
};

interface iPROVIDE_ASSETS {
    postAsset(assetDetails: ASSET_POST_JSON): Promise<ASSET_NFT>;
    removeAsset(address: ASSET_NFT_ADDRESS): Boolean;
}

interface iCONSUME_ASSETS {
    requestAsset(assetAddress: ASSET_NFT_ADDRESS, value: LIFE2D_TOKEN, options: string[]): ASSET_NFT;
}
