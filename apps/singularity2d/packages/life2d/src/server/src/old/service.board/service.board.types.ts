import '../vert.theory.types.js'

type SERVICE_NFT = NFT_THEORY;
export type SERVICE_NFT_ADDRESS = string;

type SERVICE_PROVIDER = WALLET_THEORY;
type SERVICE_PROVIDER_PUBLIC_KEY = PUBLIC_KEY;
type SERVICE_PROVIDER_PRIVATE_KEY = PRIVATE_KEY;

type SERVICE_CONSUMER = WALLET_THEORY;
type SERVICE_CONSUMER_PUBLIC_KEY = PUBLIC_KEY;
type SERVICE_CONSUMER_PRIVATE_KEY = PRIVATE_KEY;

type SERVICE_VIEWER = WALLET_THEORY;
type SERVICE_VIEWER_PUBLIC_KEY = PUBLIC_KEY;
type SERVICE_VIEWER_PRIVATE_KEY = PRIVATE_KEY;

type SERVICE_POST = SERVICE_NFT;
type SERVICE_REQUEST = {};
type SERVICE_REQUEST_PRIVATE_KEY = PRIVATE_KEY;
type SERVICE_REQUEST_PUBLIC_KEY = PUBLIC_KEY;
type SERVICE_REQUEST_SIGNATURE = SIGNATURE;

type SERVICE_RESPONSE = {};
type SERVICE_RESPONSE_PRIVATE_KEY = PRIVATE_KEY;
type SERVICE_RESPONSE_PUBLIC_KEY = PUBLIC_KEY;
type SERVICE_RESPONSE_SIGNATURE = SIGNATURE;

type SERVICE_BOARD = SERVICE_POST[];

export type SERVICE_POST_METADATA_JSON = {
    title: TITLE_STRING;
    summary: SUMMARY_STRING;
    description?: DESCRIPTION_STRING;
    images?: BASE_64_MIME_IMAGE[];
    tags?: ID_TAG[];
    keywords?: KEYWORD_STRING[];
    value?: LIFE2D_TOKEN;
};

export type SERVICE_REQUEST_POST_JSON = SERVICE_POST_METADATA_JSON;
export type SERVICE_CONSIDERATION_POST_JSON = {
    range: [number,number][]
} & SERVICE_POST_METADATA_JSON;
export type SERVICE_ANNOUNCEMENT_POST_JSON = {
    value: number
} & SERVICE_POST_METADATA_JSON;

type SERVICE_ANNOUNCEMENT = NFT_THEORY;
type SERVICE_ANNOUNCEMENT_PRIVATE_KEY = PRIVATE_KEY;
type SERVICE_ANNOUNCEMENT_PUBLIC_KEY = PUBLIC_KEY;
type SERVICE_ANNOUNCEMENT_NFT_ADDRESS = SERVICE_NFT_ADDRESS;

type SERVICE_CONSIDERATION = PRIVATE_KEY;
type SERVICE_CONSIDERATION_PRIVATE_KEY = PRIVATE_KEY;
type SERVICE_CONSIDERATION_PUBLIC_KEY = PUBLIC_KEY;
type SERVICE_CONSIDERATION_NFT_ADDRESS = SERVICE_NFT_ADDRESS;


interface iPROVIDE_SERVICES {
    postService(serviceDetails: SERVICE_POST_METADATA_JSON): Promise<CIDv1>;
    stopService(address: SERVICE_NFT_ADDRESS): Boolean;
}
interface iPROVIDE_SPECIFIC_SERVICES {
    postServiceAnnouncement(serviceDetails: SERVICE_ANNOUNCEMENT_POST_JSON): SERVICE_ANNOUNCEMENT;
    postServiceConsidertation(serviceDetails: SERVICE_CONSIDERATION_POST_JSON): SERVICE_CONSIDERATION;
    postServiceRequest(serviceDetails: SERVICE_REQUEST_POST_JSON): SERVICE_REQUEST;
    postService(serviceDetails: SERVICE_POST_METADATA_JSON): SERVICE_NFT;
    stopService(address: SERVICE_NFT_ADDRESS): Boolean;
}
interface iPROVIDE_TYPED_SERVICES<request,response> {
    postService(serviceDetails: request): response;
    stopService(address: SERVICE_NFT_ADDRESS): Boolean;
}

interface iCONSUME_SERVICES {
    getService(address: SERVICE_NFT_ADDRESS, value: LIFE2D_TOKEN, metadata: string): SERVICE_ANNOUNCEMENT;
}
