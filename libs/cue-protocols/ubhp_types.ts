/**
 * SExprType Enumeration for Canonical Encoding.
 * Defines the types of S-expressions for canonical binary serialization.
 * These types are fundamental for representing all data and executable logic
 * within the CUE as ArrayBuffers. This is the "word domain".
 */
export enum SExprType {
  NULL = 0x00,
  BOOL = 0x01,
  INT32 = 0x02,
  FLOAT64 = 0x05,
  STRING = 0x06,
  SYMBOL = 0x07,
  LIST = 0x08,
  REFERENCE = 0x0A,
}

/**
 * Represents a Harmonic Vector, a numerical signature derived from an
 * ArrayBuffer S-expression. This enables perceptual content addressing and
 * geometric analysis. It embodies the "point domain" transformation of binary
 * data ("word domain").
 */
export class HarmonicVector {
  id!: string; // Perceptual content address derived from harmonic properties.
  length!: number; // Original byte length of the binary S-expression.
  sin!: number;
  cos!: number;
  tan!: number;
  h!: number;      // Hypotenuse (Euclidean norm) of the byte values.
  buffer!: ArrayBuffer; // The original S-expression, preserved for integrity.
  components!: number[]; // Vector components for geometric calculations
}

/**
 * Represents a Rectification Proof, generated by the CAR consensus mechanism.
 * It cryptographically links a new event to an older event it has rectified,
 * providing a verifiable proof of continuous ledger coherence.
 * It includes a signature for verifiability and an expiration timestamp to
 * prevent the use of stale proofs.
 */
export class RectificationProof {
  rectifiedEventId!: string; // The ID of the older event that was rectified.
  rectifyingEventId!:string; // The ID of the new event performing the rectification.
  proofHash!: string;      // The cryptographic hash satisfying the dynamic prime modulus.
  timestamp!: number;
  signerCredentialId!: string; // The public key of the peer that generated this proof.
  signature!: string;      // The signature of the proof payload by the signer.
  expirationTimestamp!: number; // Timestamp after which this proof is no longer valid.
}

/**
 * Payload for a REVOKE_PROOF event.
 * Signals that a previously issued RectificationProof is now considered invalid,
 * allowing the network to self-correct.
 */
export class RevocationPayload {
  proofIdToRevoke!: string; // The ID of the RectificationProof being revoked.
  reason!: string;          // Reason for revocation (e.g., "inconsistency detected").
  timestamp!: number;
}